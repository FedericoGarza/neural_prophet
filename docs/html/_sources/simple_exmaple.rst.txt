.. _my-reference-label2:

Full Simple Model
==================


This page contains details of how you can build a simple model using NeuralProphet with minimal features.

Install
--------
After downloading the code repository (via :code:`git clone`), change to the repository directory (:code:`cd neural_prophet`) and install neuralprophet as python package with
:code:`pip install .`

Note: If you plan to use the package in a Jupyter notebook, it is recommended to install the 'live' package version with :code:`pip install .[live]`.
This will allow you to enable :code:`plot_live_loss` in the :code:`train` function to get a live plot of train (and validation) loss.

Import
-------

The input data format expected by the :code:`neural_prophet` package is the same as in original 
:code:`prophet`. It should have two columns, :code:`ds` which has the timestamps and :code:`y` column which
contains the observed values of the time series. Throughout this documentation, we 
will be using the time series data of the log daily page views for the `Peyton Manning <https://en.wikipedia.org/wiki/Peyton_Manning>` Wikipedia page. The data can be imported as follows.

.. code-block:: Python

  import pandas as pd

  data_location = "https://raw.githubusercontent.com/ourownstory/neuralprophet-data/main/datasets/"

  df = pd.read_csv(data_location + 'wp_log_peyton_manning.csv')

Simple Model 
-------------

A simple model with :code:`neural_prophet` for this dataset can be fitted by creating
an object of the :code:`NeuralProphet` class as follows and calling the fit function. This 
fits a model with the default settings in the model. Note that the frequency of data is set globally here. 
Valid timeseries frequency settings are `pandas timeseries offset aliases <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases)>`.

.. code-block:: Python

  m = NeuralProphet()
  metrics = m.fit(df, freq="D")

Once the model is fitted, we can make predictions using the fitted model. 
Here we are predicting in-sample over our data to evaluate the model fit.
We could do the same for a holdout set.

.. code-block:: Python 

  future = m.make_future_dataframe(df=df, periods=365)
  forecast = m.predict(df=future)

